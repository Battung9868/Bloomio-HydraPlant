//
//  NotificationManager.swift
//  Green Timer
//
//  Created by –°–∞–¥—ã–≥ –°–∞–¥—ã–≥–æ–≤ on 25.10.2025.
//

import Foundation
import UserNotifications

class NotificationManager {
    static let shared = NotificationManager()
    
    private init() {}
    
    func requestAuthorization(completion: @escaping (Bool) -> Void) {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, error in
            DispatchQueue.main.async {
                completion(granted)
            }
        }
    }
    
    func scheduleNotifications(for plant: Plant, reminderStart: Date, reminderEnd: Date, pauseUntil: Date?) {
        // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
        cancelNotifications(for: plant.id)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
        if let pauseDate = pauseUntil, Date() < pauseDate {
            print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ø–∞—É–∑–µ –¥–æ \(pauseDate)")
            return
        }
        
        let calendar = Calendar.current
        
        // 1. Watering notification
        if let nextWateringDate = getNextActionDate(
            lastDate: plant.lastWatered,
            intervalDays: plant.wateringIntervalDays,
            reminderStart: reminderStart
        ) {
            scheduleNotification(
                id: "watering-\(plant.id.uuidString)",
                title: "üíß Time to water",
                body: "\(plant.name) needs watering",
                date: nextWateringDate
            )
        }
        
        // 2. Spraying notification
        if let sprayingInterval = plant.sprayingIntervalDays,
           let lastSprayed = plant.lastSprayed,
           let nextSprayingDate = getNextActionDate(
            lastDate: lastSprayed,
            intervalDays: sprayingInterval,
            reminderStart: reminderStart
        ) {
            scheduleNotification(
                id: "spraying-\(plant.id.uuidString)",
                title: "üí¶ Time to spray",
                body: "\(plant.name) needs spraying",
                date: nextSprayingDate
            )
        }
        
        // 3. Feeding notification
        if let feedingInterval = plant.feedingIntervalDays,
           let lastFed = plant.lastFed,
           let nextFeedingDate = getNextActionDate(
            lastDate: lastFed,
            intervalDays: feedingInterval,
            reminderStart: reminderStart
        ) {
            scheduleNotification(
                id: "feeding-\(plant.id.uuidString)",
                title: "üåø Time to feed",
                body: "\(plant.name) needs feeding",
                date: nextFeedingDate
            )
        }
    }
    
    private func getNextActionDate(lastDate: Date?, intervalDays: Int, reminderStart: Date) -> Date? {
        guard let lastDate = lastDate else { return nil }
        
        let calendar = Calendar.current
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        guard let nextActionDay = calendar.date(byAdding: .day, value: intervalDays, to: lastDate) else {
            return nil
        }
        
        // –ï—Å–ª–∏ –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à—ë–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil
        if calendar.isDateInToday(nextActionDay) || nextActionDay < Date() {
            // –î–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –æ–∫–Ω–∞
            let reminderComponents = calendar.dateComponents([.hour, .minute], from: reminderStart)
            return calendar.date(bySettingHour: reminderComponents.hour ?? 19, minute: reminderComponents.minute ?? 0, second: 0, of: Date())
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –æ–∫–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        let reminderComponents = calendar.dateComponents([.hour, .minute], from: reminderStart)
        return calendar.date(
            bySettingHour: reminderComponents.hour ?? 19,
            minute: reminderComponents.minute ?? 0,
            second: 0,
            of: nextActionDay
        )
    }
    
    private func scheduleNotification(id: String, title: String, body: String, date: Date) {
        let content = UNMutableNotificationContent()
        content.title = title
        content.body = body
        content.sound = .default
        content.badge = 1
        
        let calendar = Calendar.current
        let components = calendar.dateComponents([.year, .month, .day, .hour, .minute], from: date)
        
        let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)
        let request = UNNotificationRequest(identifier: id, content: content, trigger: trigger)
        
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error)")
            } else {
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: \(title) –Ω–∞ \(date)")
            }
        }
    }
    
    func cancelNotifications(for plantId: UUID) {
        let identifiers = [
            "watering-\(plantId.uuidString)",
            "spraying-\(plantId.uuidString)",
            "feeding-\(plantId.uuidString)"
        ]
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: identifiers)
    }
    
    func scheduleAllNotifications(for plants: [Plant], reminderStart: Date, reminderEnd: Date, pauseUntil: Date?) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        UNUserNotificationCenter.current().removeAllPendingNotificationRequests()
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
        for plant in plants {
            scheduleNotifications(for: plant, reminderStart: reminderStart, reminderEnd: reminderEnd, pauseUntil: pauseUntil)
        }
    }
    
    func checkNotificationStatus(completion: @escaping (Bool) -> Void) {
        UNUserNotificationCenter.current().getNotificationSettings { settings in
            DispatchQueue.main.async {
                completion(settings.authorizationStatus == .authorized)
            }
        }
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    func printScheduledNotifications() {
        UNUserNotificationCenter.current().getPendingNotificationRequests { requests in
            print("üì± –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: \(requests.count)")
            for request in requests {
                if let trigger = request.trigger as? UNCalendarNotificationTrigger,
                   let nextTriggerDate = trigger.nextTriggerDate() {
                    print("  - \(request.content.title): \(nextTriggerDate)")
                }
            }
        }
    }
}

